{"version":3,"sources":["products.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;YAgCA;gBAQI,2BAAmB,IAAS;oBAAT,SAAI,GAAJ,IAAI,CAAK;oBACxB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;oBACnB,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,sBAAsB,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;gBACtE,CAAC;gBAED,oCAAQ,GAAR;oBACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;oBACvE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;oBACpD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,EAAE,UAAU,IAAI;wBAC3D,IAAI,CAAC,OAAO,CAAC,UAAU,OAAO;4BAC1B,IAAI,CAAC,cAAc,EAAE,CAAC;4BACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC;gCAC5B,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;4BAC1B,CAAC;wBACL,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBAClB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClB,CAAC;gBAED,sCAAU,GAAV,UAAW,GAAG;oBAAd,iBAaC;oBAZG,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;oBACnB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;oBACxB,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAChB,IAAI,IAAI,GAAG,MAAM,GAAG,kBAAkB,CAAC,GAAG,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;oBAC1E,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;oBACpE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE;wBACxB,OAAO,EAAE,OAAO;qBACnB,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBAC9B,SAAS,CACN,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAA7B,CAA6B,CAC5C,CAAC;gBACV,CAAC;gBAED,0CAAc,GAAd,UAAe,GAAG;oBACd,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC9B,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACrB,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBACvC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACvB,CAAC;gBACL,CAAC;gBA3EL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,eAAe;wBACzB,QAAQ,EAAE,8uBAsBR;wBACF,SAAS,EAAE,CAAC,qBAAc,CAAC;qBAC9B,CAAC;;qCAAA;gBAmDF,wBAAC;YAAD,CAlDA,AAkDC,IAAA;YAlDD,iDAkDC,CAAA","file":"products.component.js","sourcesContent":["import random = require(\"core-js/fn/number/random\");\ndeclare var Pusher:any;\nimport {Component} from \"@angular/core\";\nimport {HTTP_PROVIDERS, Http, Headers} from \"@angular/http\";\nimport \"rxjs/Rx\";\n@Component({\n    selector: 'products-list',\n    template: `\n<ul>\n    <li class=\"product\" *ngFor=\"let product of products\">\n    <div class=\"panel panel-default product-panel\">\n  <div class=\"panel-heading\">{{ product.name }} - <em>#ID: {{product.productID}}</em></div>\n  <div class=\"panel-body\">\n    {{ product.description }}\n    \n    <h5>More data</h5>\n    <ul>\n        <li><b>Price</b> : {{ product.price }} {{ product.currency }}</li>\n        <li><b>Product URL</b> : {{ product.productURL }}</li>\n        <li><b>Image URL</b> : {{ product.imageURL }}</li>\n        <li><b>Categories:</b> \n            <ul>\n                <li *ngFor=\"let category of product.categories\">{{ category }}</li>        \n            </ul>\n        </li>\n    </ul>\n  </div>\n</div>\n     </li>\n</ul>`,\n    providers: [HTTP_PROVIDERS]\n})\nexport class ProductsComponent {\n\n    pusher:any;\n    channel:any;\n    products:any;\n    identifier:any;\n    totalProcessed:number;\n\n    constructor(public http:Http) {\n        this.products = [];\n        this.pusher = new Pusher('1d1099dc442b77d30bfc', {cluster: \"eu\"});\n    }\n\n    listener() {\n        this.identifier = Math.floor(Math.random() * (9999 - 1111 + 1)) + 1111;\n        this.channel = this.pusher.subscribe('feed-reader');\n        this.channel.bind('new-feed-' + this.identifier, function (data) {\n            data.forEach(function (product) {\n                this.totalProcessed++;\n                this.products.push(product);\n                if (this.products.length > 10) {\n                    this.products.shift();\n                }\n            }.bind(this));\n        }.bind(this));\n    }\n\n    processXML(url) {\n        this.products = [];\n        this.totalProcessed = 0;\n        this.listener();\n        var body = \"url=\" + encodeURIComponent(url) + \"&event=\" + this.identifier;\n        var headers = new Headers();\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\n        this.http.post('xml', body, {\n            headers: headers\n        }).map(response => response.json())\n            .subscribe(\n                response => this.handleResponse(response)\n            );\n    }\n\n    handleResponse(res) {\n        if (res.hasOwnProperty('ERROR')) {\n            alert(res.ERROR);\n        } else if (res.hasOwnProperty('MESSAGE')) {\n            alert(res.MESSAGE);\n        }\n    }\n\n}"],"sourceRoot":"/source/"}